buildscript {
    ext.kotlin_version = '1.2.50'

    repositories {
        mavenCentral()

        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER') ?: 'cuba'
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD') ?: 'cuba123'
            }
            url System.getenv('HAULMONT_REPOSITORY_URL') ?: 'https://repo.cuba-platform.com/content/groups/work'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'com.haulmont.cuba.cli'
version rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : '1.0-SNAPSHOT'

def moduleName = "com.haulmont.cuba.cli"

def velocityVersion = "1.7"
def jCommanderVersion = "1.72"
def jansiVersion = "1.17"
def guavaVersion = "25.0-cuba.0"
def slf4jVersion = "1.7.25"
def jlineVersion = "3.6.2"
def kodeinVersion = "5.0.0"
def practicalxmlVersion = "1.1.0"

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'application'

sourceCompatibility = 10
targetCompatibility = 10

repositories {
    mavenCentral()
    maven {
        credentials {
            username System.getenv('HAULMONT_REPOSITORY_USER') ?: 'cuba'
            password System.getenv('HAULMONT_REPOSITORY_PASSWORD') ?: 'cuba123'
        }
        url System.getenv('HAULMONT_REPOSITORY_URL') ?: 'https://repo.cuba-platform.com/content/groups/work'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.beust:jcommander:$jCommanderVersion"
    implementation "org.jline:jline:$jlineVersion"
    implementation "org.fusesource.jansi:jansi:$jansiVersion"

    implementation("org.apache.velocity:velocity:$velocityVersion") {
        // jlink: org.apache.commons.lang.enum: Invalid package name: 'enum' is not a Java identifier
        exclude(group: 'commons-lang', module: 'commons-lang')
    }
    // Using custom JAR without 'enum' package
    implementation("commons-lang:commons-lang:2.4-cuba.0")

    implementation("com.google.guava:guava:$guavaVersion") {
        exclude(group: 'com.google.code.findbugs', module: 'jsr305')
    }

    implementation "org.slf4j:slf4j-simple:$slf4jVersion"

    implementation "org.kodein.di:kodein-di-generic-jvm:$kodeinVersion"

    implementation("net.sf.practicalxml:practicalxml:$practicalxmlVersion") {
        exclude(group: "junit", module: "junit")
    }

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

configurations {
    compile {
        exclude(group: 'org.jetbrains', module: 'annotations')
    }
}

[compileKotlin, compileTestKotlin].each {
    it.kotlinOptions.jvmTarget = '1.8'
}

processResources.doLast {
    def buildProperties = new File(project.buildDir, 'resources/main/com/haulmont/cuba/cli/application.properties')
    buildProperties.text = buildProperties.text.replace('version = DEVELOPMENT', 'version = ' + project.version)
}

compileJava {
    inputs.property("moduleName", moduleName)

    options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--patch-module', 'com.haulmont.cuba.cli=' + compileKotlin.destinationDir
    ]
}

jar {
    // do not permit duplicates in JAR
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.FAIL
}

// disable automatic building of ZIP and TAR
configurations.archives.artifacts.removeAll {
    it.file =~ 'tar' || it.file =~ 'zip'
}

task sourceJar(type: Jar) {
    from file('src/main/java')
    from file('src/main/kotlin')
    from file('src/main/resources')
    classifier = 'sources'
}

artifacts {
    archives sourceJar
}

task generatePom(group: 'distribution', description: 'Generates POM file for uploading to repository') {
    doLast {
        def mavenPomDir = new File(project.buildDir, 'maven-pom')
        mavenPomDir.mkdirs()

        pom {
            project {
                inceptionYear '2018'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }.writeTo(new File(mavenPomDir, 'pom.xml'))
    }
}

mainClassName = "com.haulmont.cuba.cli.EntryPointKt"

startScripts {
    doLast {
        unixScript.text = unixScript.text
                .replace(
                "eval set -- \$DEFAULT_JVM_OPTS \$JAVA_OPTS \$CUBA_CLI_OPTS -classpath \"\\\"\$CLASSPATH\\\"\" $mainClassName \"\$APP_ARGS\"",
                "eval set -- \$DEFAULT_JVM_OPTS \$JAVA_OPTS \$CUBA_CLI_OPTS -p \"\\\"\$CLASSPATH\\\"\" -m $moduleName/$mainClassName \"\$APP_ARGS\"")

        windowsScript.text = windowsScript.text
                .replace(
                "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %CUBA_CLI_OPTS%  -classpath \"%CLASSPATH%\" $mainClassName %CMD_LINE_ARGS%",
                "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %CUBA_CLI_OPTS%  -p \"%CLASSPATH%\" -m $moduleName/$mainClassName %CMD_LINE_ARGS%")

    }
}

def bundlePlatform = project.hasProperty('targetOsPlatform') ? '-' + project.property('targetOsPlatform') : '';

def bundlesDir = file("bundles")
def modulesDir = file("${project.buildDir}/modules")
def bundleOutput = file("${buildDir}/bundle" + bundlePlatform)
def installedLibsDir = file("${buildDir}/install/cuba-cli/lib")
def patchLibsDir = file("${buildDir}/jar-patch")

def modulesConfig = [
        'slf4j.api'                 : "slf4j-api-${slf4jVersion}.jar",
        'slf4j.simple'              : "slf4j-simple-${slf4jVersion}.jar",
        'commons.lang'              : "commons-lang-2.4-cuba.0.jar",
        'commons.collections'       : "commons-collections-3.2.1.jar",
        'velocity'                  : "velocity-${velocityVersion}.jar",
        'checker.compat.qual'       : "checker-compat-qual-2.0.0.jar",
        'error.prone.annotations'   : "error_prone_annotations-2.1.3.jar",
        'j2objc.annotations'        : "j2objc-annotations-1.1.jar",
        'animal.sniffer.annotations': "animal-sniffer-annotations-1.14.jar",
        'com.google.common'         : "guava-${guavaVersion}.jar",
        'practicalxml'              : "practicalxml-${practicalxmlVersion}.jar",
        'jansi'                     : "jansi-${jansiVersion}.jar",
        'jline'                     : "jline-${jlineVersion}.jar",
        'jcommander'                : "jcommander-${jCommanderVersion}.jar",
        'kotlin.stdlib'             : "kotlin-stdlib-${kotlin_version}.jar",
        'kotlin.reflect'            : "kotlin-reflect-${kotlin_version}.jar",
        'kotlin.stdlib.jdk7'        : "kotlin-stdlib-jdk7-${kotlin_version}.jar",
        'kotlin.stdlib.jdk8'        : "kotlin-stdlib-jdk8-${kotlin_version}.jar",
        'kodein.di.core.jvm'        : "kodein-di-core-jvm-${kodeinVersion}.jar",
        'kodein.di.generic.jvm'     : "kodein-di-generic-jvm-${kodeinVersion}.jar"
]

task jarPatch(dependsOn: installDist, group: 'build',
        description: 'Patch dependencies with module information') {
    inputs.dir bundlesDir
    outputs.dir patchLibsDir

    inputs.files installDist.outputs.files

    doLast {
        delete patchLibsDir
        delete modulesDir

        modulesDir.mkdirs()

        // Compile module definitions
        copy {
            from installedLibsDir
            into patchLibsDir
        }

        def javaHome = System.getenv('JAVA_HOME')
        if (javaHome == null
                || javaHome.isEmpty()) {
            throw new GradleException('JAVA_HOME is not set')
        }

        for (moduleItem in modulesConfig) {
            def moduleItemName = moduleItem.key
            def moduleItemJar = moduleItem.value

            def jarFile = new File(patchLibsDir, moduleItemJar)

            logger.info("Modularize ${moduleItemJar}")

            logger.info("Compile module-info.class")

            def compiledModuleDir = new File(modulesDir, moduleItemName)

            exec {
                workingDir modulesDir

                commandLine(
                        "${javaHome}/bin/javac",
                        '-p', patchLibsDir.absolutePath,
                        '-d', compiledModuleDir.absolutePath,
                        '--patch-module', "${moduleItemName}=${jarFile.absolutePath}",
                        new File(project.file("bundles"), "${moduleItemName}/module-info.java").absolutePath
                )

                standardOutput = System.out
                errorOutput = System.out
            }

            logger.info("Update JAR")

            exec {
                workingDir patchLibsDir

                commandLine(
                        "${javaHome}/bin/jar",
                        'uf',
                        jarFile.absolutePath,
                        '-C',
                        compiledModuleDir.absolutePath,
                        'module-info.class'
                )

                standardOutput = System.out
                errorOutput = System.out
            }
        }
    }
}

task bundle(dependsOn: jarPatch,
        group: 'distribution',
        description: 'Builds bundle with custom JRE') {
    outputs.dir bundleOutput
    inputs.dir patchLibsDir

    ext.appModulePaths = [patchLibsDir]

    doLast {
        delete bundleOutput

        logger.info("Linking")

        def javaHome = System.getenv('JAVA_HOME')
        if (javaHome == null
                || javaHome.isEmpty()) {
            throw new GradleException('JAVA_HOME is not set')
        }

        def targetOsJavaHome = project.hasProperty('targetOsJavaHome') ? project.property('targetOsJavaHome') : null
        if (targetOsJavaHome == null
            || targetOsJavaHome.isEmpty()) {
            targetOsJavaHome = javaHome
        }

        logger.info('Target JAVA_HOME ' + targetOsJavaHome)

        // Call jlink
        exec {
            workingDir buildDir

            commandLine(
                    "${javaHome}/bin/jlink",
                    '--module-path', (["${targetOsJavaHome}/jmods"] + ext.appModulePaths).grep().join(File.pathSeparator),
                    '--add-modules', moduleName,
                    '--output', bundleOutput,
                    '--launcher', "launch=$moduleName/$mainClassName",
                    '--compress=2',
                    '--no-header-files',
                    '--no-man-pages'
            )

            standardOutput = System.out
            errorOutput = System.out

            logger.info commandLine.join(' ')
        }

        logger.info("Rename launcher")

        def launchFile = new File(bundleOutput, "bin/launch")
        def launchBatFile = new File(bundleOutput, "bin/launch.bat")

        def cubacliFile = new File(bundleOutput, "cuba-cli")
        if (launchBatFile.exists()) {
            cubacliFile = new File(bundleOutput, "cuba-cli.bat")
        }

        if (launchFile.exists()) {
            if (launchBatFile.exists()) {
                launchFile.delete()
            } else {
                launchFile.renameTo(cubacliFile)
                cubacliFile.text = cubacliFile.text.replace('$DIR/java', '$DIR/bin/java')
            }
        }

        if (launchBatFile.exists()) {
            launchBatFile.renameTo(cubacliFile)
            cubacliFile.text = cubacliFile.text.replace('"%DIR%\\java"', '"%DIR%\\bin\\java"')
        }

        logger.info("Fix permissions")

        // fix non-writable files in 'legal/'
        def osName = System.getProperty("os.name").toLowerCase();
        if (osName.contains('nux')
                || osName.contains('mac')) {
            exec {
                executable 'chmod'
                args = ['u+w', '-R', bundleOutput]
            }
        }
    }
}